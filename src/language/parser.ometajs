// # module: Dollphie.parser
//
// Provides parsers for the different levels of Dollphie.

// -- Dependencies -----------------------------------------------------
var AST = require('./ast');

var Named = AST.Arg.Named;
var Pos   = AST.Arg.Pos;

var ArgList   = AST.ArgList;
var DeclList  = AST.DeclList;
var ParamList = AST.ParamList;
var ExprList  = AST.ExprList;

var SimpleBlock = AST.Block.SimpleBlock;
var RawBlock    = AST.Block.RawBlock;
var EmptyBlock  = AST.Block.EmptyBlock;

var Str        = AST.Expr.Str;
var Num        = AST.Expr.Num;
var Bool       = AST.Expr.Bool;
var Id         = AST.Expr.Id;
var Symbol     = AST.Expr.Symbol;
var Nil        = AST.Expr.Nil;
var Vector     = AST.Expr.Vector;
var App        = AST.Expr.App;
var Define     = AST.Expr.Define;
var Let        = AST.Expr.Let;
var IfThenElse = AST.Expr.IfThenElse;
var Fun        = AST.Expr.Fun;
var Quote      = AST.Expr.Quote;
var Document   = AST.Expr.Document;
var Context    = AST.Expr.Context;

// -- Helpers ----------------------------------------------------------

// ### data: reservedSymbols
// @private
// @type{ Array<String> }
var reservedSymbols = ["define", "let", "if", "fun", "raw"];

// ### function: isReserved
// @private
// @type{ String → Boolean }
function isReserved(a) {
  return reservedSymbols.indexOf(a) !== -1
}

// ### function: toNumber
// @private
// @type{ String, String → Number }
function toNumber(integer, decimal) {
  return Number(integer + '.' + (decimal || 0))
}

// ### function: repack
// @private
// @type{ Expr(_), Expr(_), Expr → Expr }
function repack(from, to, expr) {
  if (expr instanceof from) {
    return to(expr[0]);
  } else {
    throw new TypeError("No cases matched the value.");
  }
}

// ### function: section
// @private
// @type{ Number, String → AST.Expr }
function section(level, title) {
  return Context(
    level,
    function(children) {
      return App(
        Id('section'),
        ArgList([
          Pos(Str(title.trim())),
          Pos(Vector(children))
        ]),
        EmptyBlock
      )
    }
  )
}

// ### function: declaration
// @private
// @type{ Number, Expr, Expr → Expr }
function declaration(level, kind, value) {
  return Context(
    level,
    function(children) {
      return App(
        Id('declaration'),
        ArgList([
          Pos(repack(Id, Str, kind)),
          Pos(repackQualifiedId(value)),
          Pos(Vector(children))
        ]),
        EmptyBlock
      )
    }
  );

  function repackQualifiedId(expr) {
    return expr.cata({
      Vector: function(ids) {
        return Vector(ids.map(repack.bind(null, Id, Str)))
      }
    })
  }
}

// ### function: text
// @private
// @type{ Array<Expr> → Expr }
function text(contents) {
  return App(
    Id('text'),
    ArgList([
      Pos(Vector(contents))
    ]),
    EmptyBlock
  )
}

// ### function: hardLine
// @private
// @type{ Array<Expr> → Expr }
function hardLine(contents) {
  return App(
    Id('line'),
    ArgList([
      Pos(text(contents))
    ]),
    EmptyBlock
  )
}

// ### function: softBreak
// @private
// @type{ Void → Expr }
function softBreak() {
  return App(
    Id('soft-break'),
    ArgList([]),
    EmptyBlock
  )
}

// ### function: paragraph
// @private
// @type{ Array<Expr> → Expr }
function paragraph(contents) {
  return App(
    Id('paragraph'),
    ArgList([
      Pos(Vector(contents))
    ]),
    EmptyBlock
  )
}

// ### function: bold
// @private
// @type{ Expr → Expr }
function bold(contents) {
  return App(
    Id('bold'),
    ArgList([
      Pos(contents)
    ]),
    EmptyBlock
  )
}

// ### function: italic
// @private
// @type{ Expr → Expr }
function italic(contents) {
  return App(
    Id('italic'),
    ArgList([
      Pos(contents)
    ]),
    EmptyBlock
  )
}


// -- Parsers ----------------------------------------------------------

// ## object: CoreParser
//
// A parser for the core Lisp-like language.
ometa CoreParser {
  eol    = '\n' | '\r',
  hs     = ' ' | '\t',
  space  = hs | eol,
  ws     = space*,
  eof    = ~char,
  kw :xs = seq(xs) ~(letter | digit | symbol | ':'),

  digits = digit+,
  number = digits:a ('.' digits:b)? 
        -> Num(toNumber(a, b)),

  escapedChar = '\\' '"',
  stringChar  = escapedChar | (~seq('"') char),
  string      = '"' stringChar*:as '"' -> Str(as.join('')),

  special   = '{' | '}' | '(' | ')' | '[' | ']' | ':' | '\'' | '"' | '@',
  nameStart = ~(special | digit | space) char,
  nameRest  = ~(special | space) char,
  name      = <nameStart nameRest*>:a ?(!isReserved(a)) -> Id(a),

  nil    = kw('nil')                -> Nil,
  bool   = kw('true')               -> Bool(true),
         | kw('false')              -> Bool(false),
  vector = '[' (ws expr)*:xs ws ']' -> Vector(xs),
  symbol = '\'' name:a              -> Symbol(a),

  value  = number | string | bool | nil | name | symbol | vector,

  call         = '@' name:a callArgs?:b callBlock?:c 
              -> App(a, ArgList(b || []), c || EmptyBlock),
  callArgs     = '(' (ws callExpr)*:xs ws ')' -> xs,
  callExpr     = name:a ':' ws expr:b         -> Named(a, b)
               | expr:a                       -> Pos(a),
  callBlock    = simpleBlock | rawBlock | lineBlock,
  simpleEscape = '\\' '}',
  simpleChar   = simpleEscape | (~seq('}') char),
  simpleBlock  = '{' simpleChar*:as '}'                  -> SimpleBlock(as.join('')),
  rawBlock     = '{{{' (~seq('}}}') char)*:as '}}}'      -> RawBlock(as.join('')),
  lineBlock    = ':' ws (~eol char)*:as (eol | eof) -> SimpleBlock(as.join('')),

  def  = kw('@define') '(' ws name:a ws args:b ws expr*:c ws ')' 
      -> Define(a, ParamList(b), ExprList(c)),
  args = '[' (ws name)*:as ws ']' -> as,

  letExpr   = kw('@let') '(' ws letVector:a ws expr*:b ws ')' 
           -> Let(DeclList(a), ExprList(b)),
  letVector = '[' ws letDecl*:a ws ']' -> a,
  letDecl   = name:a ':' ws expr:b     -> [a, b],

  ifExpr = kw('@if') '(' ws expr:a ws kw('then:') ws expr:b ws kw('else:') ws expr:c ws ')' 
        -> IfThenElse(a, b, c),

  fun = kw('@fun') '(' ws args:a ws expr*:b ws ')' 
     -> Fun(ParamList(a), ExprList(b)),

  quote = kw('@raw') '(' ws expr:a ws ')' 
       -> Quote(a),

  callable = letExpr | ifExpr | fun | def | quote | call,
  expr     = callable | value,
  document = (ws expr)*:a ws eof -> Document(ExprList(a))
}

// ## object: SugaredParser
//
// A parser for the sugared language dialect.
ometa SugaredParser <: CoreParser {
  heading = hs* (section | declaration):a hs* (eol | eof) -> a,
  block = heading | paragraph | blankLine,

  title   = (~('-') char)+:a -> a.join(''),
  section = '-'+:a hs* title:b hs* '-'* -> section(a.length, b),

  qualName    = name:a ('.' name)*:bs -> Vector([a].concat(bs)),
  declaration = '#'+:a hs* name:b ':' hs* qualName:c hs* '#'* -> declaration(a.length, b, c),

  hardLine  = hs* '|' text+:a (eol | eof)          -> hardLine(a),
  softLine  = ~blankLine text+:a (eol | eof)       -> text(a),
  blankLine = hs* (eol | eof)                      -> softBreak(),
  paragraph = (hardLine | softLine)+:a blankLine   -> paragraph(a),

  strong     = '\\' '*'        -> Str('*')
             | '*' text+:a '*' -> bold(text(a)),
  italic     = '\\' '/'        -> Str('/')
             | '/' text+:a '/' -> italic(text(a)),
  formatting = strong | italic,

  escapeExpr = '\\' '@' -> Str('@'),
  text       = escapeExpr | callable | formatting | word,
  word       = (~('\\' | '*' | '/' | '@' | eol) char)+:a -> Str(a.join('')),

  document = (ws block)*:a ws eof -> Document(ExprList(a))
}
