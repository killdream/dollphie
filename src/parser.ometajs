// # module: dollphie/lib/parser
//
// Provides parsers for the different levels of Dollphie.


// ## data: reservedSymbols
// @private
// @type{ Array<String> }
var reservedSymbols = ["define", "let", "if", "fun", "raw"];

// ## function: isReserved
// @private
// @type{ String â†’ Boolean }
function isReserved(a) {
  return reservedSymbols.indexOf(a) !== -1
}


// ## object: CoreParser
//
// A parser for the core Lisp-like language.
ometa CoreParser {
  eol    = '\n' | '\r',
  hs     = ' ' | '\t',
  space  = hs | eol,
  ws     = space*,
  eof    = ~char,
  kw :xs = seq(xs) ~(letter | digit | symbol | ':'),

  digits = digit+,
  number = digits:a ('.' digits:b)? -> [#Num, Number(a + '.' + (b || 0))],

  escapedChar = '\\' '"',
  stringChar  = escapedChar | (~seq('"') char),
  string      = '"' stringChar*:as '"' -> [#Str, as.join('')],

  special   = '{' | '}' | '(' | ')' | '[' | ']' | ':' | '\'' | '"' | '@',
  nameStart = ~(special | digit | space) char,
  nameRest  = ~(special | space) char,
  name      = <nameStart nameRest*>:a ?(!isReserved(a)) -> [#Id, a],

  nil    = kw('nil') -> [#Nil],
  bool   = kw('true') -> [#Bool, true]
         | kw('false') -> [#Bool, false],
  vector = '[' (ws expr)*:xs ws ']' -> [#Vector, xs],
  symbol = '\'' name:a -> [#Sym, a],
  value  = number | string | name | symbol | vector | bool | nil,

  call         = '@' name:a callArgs?:b callBlock?:c -> [#App, a, b, c],
  callArgs     = '(' (ws callExpr)*:xs ws ')' -> xs,
  callExpr     = name:a ':' ws expr:b -> [#Named, a, b]
               | expr:a -> [#Pos, a],
  callBlock    = simpleBlock | rawBlock,
  simpleEscape = '\\' '}',
  simpleChar   = simpleEscape | (~seq('}') char),
  simpleBlock  = '{' simpleChar*:as '}' -> [#Block, as.join('').trim()],
  rawBlock     = '{{{' (~seq('}}}') char)*:as '}}}' -> [#Block, as.join('')],

  def  = kw('@define') '(' ws name:a ws args:b ws expr*:c ws ')' -> [#Def, a, b, c],
  args = '[' (ws name)*:as ws ']' -> as,

  letExpr   = kw('@let') '(' ws letVector:a ws expr*:b ws ')' -> [#Let, a, b],
  letVector = '[' ws letDecl*:a ws ']' -> a,
  letDecl   = name:a ':' ws expr:b -> [a, b],

  ifExpr = kw('@if') '(' ws expr:a ws kw('then:') ws expr:b ws kw('else:') ws expr:c ws ')' 
        -> [#If, a, b, c],

  fun = kw('@fun') '(' ws args:a ws expr*:b ws ')' -> [#Fun, a, b],

  quote = kw('@raw') '(' ws expr:a ws ')' -> [#Quote, a],

  callable = letExpr | ifExpr | fun | def | quote | call,
  expr     = callable | value,
  document = (ws expr)*:a ws eof -> [#Doc, a]
}

// ## object: SugaredParser
//
// A parser for the sugared language dialect.
ometa SugaredParser <: CoreParser {
  heading = section | declaration,
  block = heading | paragraph | blankLine | expr,

  title   = (~('-') char)+:a -> a.join(''),
  section = '-'+:a ws title:b ws '-'*
         -> [#App, [#Id, 'section'], [[#Num, a.length], [#Str, b.trim()]], null],

  qualName    = name:a ('.' name)*:bs -> [#Vector, [a].concat(bs)],
  declaration = '#'+:a ws name:b ':' ws qualName:c ws '#'*
             -> [#App, [#Id, b], [[#Num, a.length], c], null],


  hardLine  = '|' (hs* text)+:a (eol | eof)
           -> [#App, [#Id, "line"], [[#App, [#Id, "text"], a, null]], null],
  softLine  = (hs* text)+:a (eol | eof)
           -> [#App, [#Id, "text"], a, null],
  blankLine = hs* eol
           -> [#App, [#Id, "soft-break"], [], null],
  paragraph = (hardLine | softLine)+:a (blankLine | eof)
           -> [#App, [#Id, "paragraph"], a, null],

  strong     = '\\' '*'             -> [#Str, '*']
             | '*' (hs* text)+:a '*' -> [#App, [#Id, "bold"], a, null],
  italic     = '\\' '/'             -> [#Str, '/']
             | '/' (hs* text)+:a '/' -> [#App, [#Id, "italic"], a, null],
  formatting = strong | italic,

  escapeExpr = '\\' '@' -> [#Str, '@'],
  text       = escapeExpr | callable | formatting | word,
  word       = (~('*' | '/' | '@' | space) char)+:a -> [#Str, a.join('')],

  document = (ws block)*:a ws eof -> [#Doc, a]
}
